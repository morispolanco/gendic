import streamlit as st
import requests
import json
from docx import Document
from io import BytesIO

# Set page configuration
st.set_page_config(page_title="Generador de Diccionario por Campo de Estudio", page_icon="üìö", layout="wide")

# Function to create the information column
def crear_columna_info():
    st.markdown("""
    ## Sobre esta aplicaci√≥n

    Esta aplicaci√≥n es un Generador de Diccionario que permite a los usuarios crear un diccionario personalizado basado en un campo o √°rea de estudio espec√≠fico.

    ### C√≥mo usar la aplicaci√≥n:

    1. Ingrese un campo o √°rea de estudio de su inter√©s.
    2. Haga clic en "Generar t√©rminos" para obtener una lista de 101 t√©rminos relacionados.
    3. Edite la lista de t√©rminos seg√∫n sea necesario.
    4. Seleccione si desea generar definiciones para todos los t√©rminos o para un t√©rmino espec√≠fico.
    5. Haga clic en "Generar definiciones" para obtener las definiciones.
    6. Lea las definiciones y las fuentes proporcionadas.
    7. Si lo desea, descargue un documento DOCX con toda la informaci√≥n.

    ### Autor y actualizaci√≥n:
    **Moris Polanco**, [Fecha actual]

    ### C√≥mo citar esta aplicaci√≥n (formato APA):
    Polanco, M. (2024). *Generador de Diccionario por Campo de Estudio* [Aplicaci√≥n web]. [URL de la aplicaci√≥n]

    ---
    **Nota:** Esta aplicaci√≥n utiliza inteligencia artificial para generar t√©rminos y definiciones. Verifique la informaci√≥n con fuentes adicionales para un an√°lisis m√°s profundo.
    """)

# Titles and Main Column
st.title("Generador de Diccionario por Campo de Estudio")

col1, col2 = st.columns([1, 2])

with col1:
    crear_columna_info()

with col2:
    TOGETHER_API_KEY = st.secrets["TOGETHER_API_KEY"]
    SERPLY_API_KEY = st.secrets["SERPLY_API_KEY"]

    def generar_terminos(campo_estudio):
        url = "https://api.together.xyz/inference"
        payload = json.dumps({
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "prompt": f"Genera una lista de 101 t√©rminos relacionados con el campo de estudio: {campo_estudio}. Cada t√©rmino debe estar en una l√≠nea nueva.",
            "max_tokens": 2048,
            "temperature": 0.7,
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 1,
        })
        headers = {
            'Authorization': f'Bearer {TOGETHER_API_KEY}',
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        terminos = response.json()['output']['choices'][0]['text'].strip().split('\n')
        return [termino.strip() for termino in terminos if termino.strip()]

    def buscar_informacion(query):
        url = f"https://api.serply.io/v1/scholar/q={query}"
        headers = {
            'X-Api-Key': SERPLY_API_KEY,
            'Content-Type': 'application/json',
            'X-Proxy-Location': 'US',
            'X-User-Agent': 'Mozilla/5.0'
        }
        response = requests.get(url, headers=headers)
        return response.json()

    def generar_definicion(termino, contexto):
        url = "https://api.together.xyz/inference"
        payload = json.dumps({
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "prompt": f"Contexto: {contexto}\n\nT√©rmino: {termino}\n\nProporciona una definici√≥n detallada del t√©rmino '{termino}'. La definici√≥n debe ser informativa, similar a una entrada de diccionario extendida. Incluye conceptos relacionados si es relevante.\n\nDefinici√≥n:",
            "max_tokens": 2048,
            "temperature": 0.7,
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 1,
            "stop": ["T√©rmino:"]
        })
        headers = {
            'Authorization': f'Bearer {TOGETHER_API_KEY}',
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        return response.json()['output']['choices'][0]['text'].strip()

    def create_docx(campo_estudio, terminos_definiciones):
        doc = Document()
        doc.add_heading(f'Diccionario de {campo_estudio}', 0)

        for termino, definicion in terminos_definiciones.items():
            doc.add_heading(termino, level=1)
            doc.add_paragraph(definicion)

        doc.add_paragraph('\nNota: Este documento fue generado por un asistente de IA. Verifica la informaci√≥n con fuentes acad√©micas para un an√°lisis m√°s profundo.')

        return doc

    # Interfaz de usuario
    campo_estudio = st.text_input("Ingresa un campo o √°rea de estudio:")

    if st.button("Generar t√©rminos"):
        if campo_estudio:
            with st.spinner("Generando t√©rminos..."):
                terminos = generar_terminos(campo_estudio)
                st.session_state.terminos = terminos

    if 'terminos' in st.session_state:
        st.subheader("Lista de t√©rminos (editable):")
        terminos_editados = st.text_area("Edita los t√©rminos aqu√≠:", "\n".join(st.session_state.terminos), height=300)
        st.session_state.terminos_editados = terminos_editados.split('\n')

    if 'terminos_editados' in st.session_state:
        opcion_definicion = st.radio("Selecciona una opci√≥n:", ["Generar todas las definiciones", "Generar definici√≥n para un t√©rmino espec√≠fico"])

        if opcion_definicion == "Generar definici√≥n para un t√©rmino espec√≠fico":
            termino_seleccionado = st.selectbox("Selecciona un t√©rmino:", st.session_state.terminos_editados)

        if st.button("Generar definiciones"):
            with st.spinner("Generando definiciones..."):
                terminos_definiciones = {}
                if opcion_definicion == "Generar todas las definiciones":
                    for termino in st.session_state.terminos_editados:
                        resultados_busqueda = buscar_informacion(f"{termino} {campo_estudio}")
                        contexto = "\n".join([item["snippet"] for item in resultados_busqueda.get("results", [])])
                        definicion = generar_definicion(termino, contexto)
                        terminos_definiciones[termino] = definicion
                else:
                    resultados_busqueda = buscar_informacion(f"{termino_seleccionado} {campo_estudio}")
                    contexto = "\n".join([item["snippet"] for item in resultados_busqueda.get("results", [])])
                    definicion = generar_definicion(termino_seleccionado, contexto)
                    terminos_definiciones[termino_seleccionado] = definicion

                st.subheader("Definiciones generadas:")
                for termino, definicion in terminos_definiciones.items():
                    st.markdown(f"**{termino}**: {definicion}")

                # Bot√≥n para descargar el documento
                doc = create_docx(campo_estudio, terminos_definiciones)
                buffer = BytesIO()
                doc.save(buffer)
                buffer.seek(0)
                st.download_button(
                    label="Descargar diccionario en DOCX",
                    data=buffer,
                    file_name=f"Diccionario_{campo_estudio.replace(' ', '_')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
